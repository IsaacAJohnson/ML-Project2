set.seed(504)
ctrl <- trainControl(method = "cv", number = 3, classProbs=TRUE, summaryFunction = twoClassSummary)
set.seed(504)
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
# example spec for rf
fit <- train(Churn ~ .,
data = train,
method = "rf",
#             ntree = 20,
#             tuneLength = 3,
metric = "ROC",
trControl = ctrl)
#fit
confusionMatrix(predict(fit, test),factor(test$Churn))
bankoJD <- prc %>%
select(Customer_Age, Total_Revolving_Bal, Total_Trans_Ct,
Total_Trans_Amt, Churn)
#removing Total_Trans_Amt dropped it from .7168 to .5ish
#removing Total_Trans_Ct dropped from .7168 to .62
#removing Avg_Utilization_Ratio dropped from .7168 to .69
#removing Credit_Limit dropped from .7168 to .69
# specify the model to be used (i.e. KNN, Naive Bayes, decision tree, random forest, bagged trees) and the tuning parameters used
set.seed(504)
ctrl <- trainControl(method = "cv", number = 3, classProbs=TRUE, summaryFunction = twoClassSummary)
set.seed(504)
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
# example spec for rf
fit <- train(Churn ~ .,
data = train,
method = "rf",
#             ntree = 20,
#             tuneLength = 3,
metric = "ROC",
trControl = ctrl)
#fit
confusionMatrix(predict(fit, test),factor(test$Churn))
bankoJD <- prc %>%
select(Credit_Limit, Customer_Age, Total_Revolving_Bal, Total_Trans_Ct,
Total_Trans_Amt, Churn)
#removing Total_Trans_Amt dropped it from .7168 to .5ish
#removing Total_Trans_Ct dropped from .7168 to .62
#removing Avg_Utilization_Ratio dropped from .7168 to .69
#removing Credit_Limit dropped from .7168 to .69
# specify the model to be used (i.e. KNN, Naive Bayes, decision tree, random forest, bagged trees) and the tuning parameters used
set.seed(504)
ctrl <- trainControl(method = "cv", number = 3, classProbs=TRUE, summaryFunction = twoClassSummary)
set.seed(504)
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
# example spec for rf
fit <- train(Churn ~ .,
data = train,
method = "rf",
#             ntree = 20,
#             tuneLength = 3,
metric = "ROC",
trControl = ctrl)
#fit
confusionMatrix(predict(fit, test),factor(test$Churn))
bankoJD <- prc %>%
select(Credit_Limit, Customer_Age, Total_Revolving_Bal, Total_Trans_Ct,
Total_Trans_Amt, Avg_Utilization_Ratio, Churn)
#removing Total_Trans_Amt dropped it from .7168 to .5ish
#removing Total_Trans_Ct dropped from .7168 to .62
#removing Avg_Utilization_Ratio dropped from .7168 to .69
#removing Credit_Limit dropped from .7168 to .69
# specify the model to be used (i.e. KNN, Naive Bayes, decision tree, random forest, bagged trees) and the tuning parameters used
set.seed(504)
ctrl <- trainControl(method = "cv", number = 3, classProbs=TRUE, summaryFunction = twoClassSummary)
set.seed(504)
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
# example spec for rf
fit <- train(Churn ~ .,
data = train,
method = "rf",
#             ntree = 20,
#             tuneLength = 3,
metric = "ROC",
trControl = ctrl)
#fit
confusionMatrix(predict(fit, test),factor(test$Churn))
bankoJD <- prc %>%
select(Credit_Limit, Customer_Age, Total_Revolving_Bal, Total_Trans_Ct,
Avg_Utilization_Ratio, Churn)
#removing Total_Trans_Amt dropped it from .7168 to .5ish
#removing Total_Trans_Ct dropped from .7168 to .62
#removing Avg_Utilization_Ratio dropped from .7168 to .69
#removing Credit_Limit dropped from .7168 to .69
# specify the model to be used (i.e. KNN, Naive Bayes, decision tree, random forest, bagged trees) and the tuning parameters used
set.seed(504)
ctrl <- trainControl(method = "cv", number = 3, classProbs=TRUE, summaryFunction = twoClassSummary)
set.seed(504)
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
# example spec for rf
fit <- train(Churn ~ .,
data = train,
method = "rf",
#             ntree = 20,
#             tuneLength = 3,
metric = "ROC",
trControl = ctrl)
#fit
confusionMatrix(predict(fit, test),factor(test$Churn))
bankoJD <- prc %>%
select(Credit_Limit, Customer_Age, Total_Revolving_Bal, Total_Trans_Ct,
Total_Trans_Amt, Churn)
#removing Total_Trans_Amt dropped it from .7168 to .5ish
#removing Total_Trans_Ct dropped from .7168 to .62
#removing Avg_Utilization_Ratio dropped from .7168 to .69
#removing Credit_Limit dropped from .7168 to .69
bankoJD <- prc %>%
select(Credit_Limit, Customer_Age, Total_Revolving_Bal, Total_Trans_Ct,
Total_Trans_Amt, Churn)
#removing Total_Trans_Amt dropped it from .7168 to .5ish
#removing Total_Trans_Ct dropped from .7168 to .62
#removing Avg_Utilization_Ratio dropped from .7168 to .69
#removing Credit_Limit dropped from .7168 to .69
# specify the model to be used (i.e. KNN, Naive Bayes, decision tree, random forest, bagged trees) and the tuning parameters used
set.seed(504)
ctrl <- trainControl(method = "cv", number = 3, classProbs=TRUE, summaryFunction = twoClassSummary)
set.seed(504)
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
# example spec for rf
fit <- train(Churn ~ .,
data = train,
method = "rf",
#             ntree = 20,
#             tuneLength = 3,
metric = "ROC",
trControl = ctrl)
#fit
confusionMatrix(predict(fit, test),factor(test$Churn))
# Here are a few lines to inspect your best model. Add some comments about optimal hyperparameters.
print(fit)
print(fit$bestTune)
# the "method" below should match the one you chose above.
set.seed(1504) # I will choose a different seed for evaluation
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
# example spec for rf
fit_final <- train(Churn ~ .,
data = train,
method = "rf",
tuneGrid=fit$bestTune,
metric = "ROC",
trControl = ctrl)
# The last line means we will fit a model using the best tune parameters your CV found above.
myRoc <- roc(test$Churn, predict(fit_final, test, type="prob")[,2])
plot(myRoc)
auc(myRoc)
library(tidyverse)
library(caret)
library(pROC)
library(MLmetrics)
knitr::opts_chunk$set(echo = TRUE)
bank = read_rds("../../BankChurners.rds")
library(forcats)
library(dplyr)
#engineering some features/encoding categorical data
bank1 <- bank %>%
mutate(gender = if_else(Gender=="M",1,0)) %>%
select(-Gender) %>%
mutate(married = if_else(Marital_Status=="Married",1,0)) %>%
mutate(single = if_else(Marital_Status=="Single",1,0)) %>%
mutate(divorced = if_else(Marital_Status=="Divorced",1,0)) %>%
mutate(ms_unknown = if_else(Marital_Status=="Unknown",1,0)) %>%
select(-Marital_Status) %>%
mutate(blue = if_else(Card_Category=="Blue",1,0)) %>%
mutate(gold = if_else(Card_Category=="Gold",1,0)) %>%
mutate(silver = if_else(Card_Category=="Silver",1,0)) %>%
mutate(platinum = if_else(Card_Category=="Platinum",1,0)) %>%
select(-Card_Category) %>%
mutate(ed_level = Education_Level %>%
fct_recode("Unknown" = "Unknown",
"Uneducated" = "Uneducated",
"High School" = "High School",
"College" = "College",
"Graduate" = "Graduate",
"Post-Graduate" = "Post-Graduate",
"Doctorate" = "Doctorate") %>%
as.integer()) %>%
select(-Education_Level) %>%
mutate(income = Income_Category %>%
fct_recode("Unknown" = "Unknown",
"low" = "Less than $40K",
"lowmed" = "40K - $60K",
"med" = "$60K - $80K",
"medhigh" = "$80K - $120K",
"high" = "$120K +") %>%
as.integer()) %>%
select(-Income_Category)
#to check if any columns have a standard deviation of zero
zero_sd_cols <- apply(bank, 2, sd) == 0
#Run the principle component analysis
pr_bank <- prcomp(x = select(bank1, -Churn), scale = T, center = T)
summary(pr_bank)
#Show variance plot
screeplot(pr_bank, type = "lines")
#Visualize biplots
biplot(pr_bank)
biplot(pr_bank, choices = c(3,4))
#Factor loadings
pr_bank$rotation
#Loadings times values for all rows
head(pr_bank$x)
#
# Get factor loadings for first principal component
pc1_loadings <- pr_bank$rotation[, 1]
# Sort factor loadings in descending order
pc1_loadings_sorted <- sort(pc1_loadings, decreasing = TRUE)
# Print sorted factor loadings for PC1
pc1_loadings_sorted
# Credit_Limit
# Total_Trans_Ct
# Customer_Age
# single (---lowers)
# Total_Revolving_Bal
bankoJD <- bank1 %>%
select(Total_Trans_Amt, Total_Trans_Ct, Customer_Age, Total_Revolving_Bal, Churn)
#select(Credit_Limit, Total_Trans_Ct, Customer_Age, Total_Revolving_Bal, Churn)
print(ncol(bankoJD)) # Only 5 features allowed! Not counting the dependent variable.
set.seed(504)
ctrl <- trainControl(method = "cv", number = 5, classProbs=TRUE, summaryFunction = twoClassSummary)
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
fit <- train(Churn ~ .,
data = train,
method = "rf",
metric = "Kappa",
preProcess = c("center", "scale"),
trControl = ctrl)
confusionMatrix(predict(fit, test),factor(test$Churn))
# specify the model to be used (i.e. KNN, Naive Bayes, decision tree, random forest, bagged trees) and the tuning parameters used
ctrl <- trainControl(method = "cv", number = 5, classProbs=TRUE, summaryFunction = twoClassSummary)
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
# example spec for rf
fit <- train(Churn ~ .,
data = train,
method = "rf",
metric = "ROC",
trControl = ctrl)
fit
confusionMatrix(predict(fit, test),factor(test$Churn))
# Here are a few lines to inspect your best model. Add some comments about optimal hyperparameters.
print(fit)
print(fit$bestTune)
# the "method" below should match the one you chose above.
set.seed(1504) # I will choose a different seed for evaluation
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
# example spec for rf
fit_final <- train(Churn ~ .,
data = train,
method = "rf",
tuneGrid=fit$bestTune,
metric = "ROC",
trControl = ctrl)
# The last line means we will fit a model using the best tune parameters your CV found above.
myRoc <- roc(test$Churn, predict(fit_final, test, type="prob")[,2])
plot(myRoc)
auc(myRoc)
library(tidyverse)
library(caret)
library(pROC)
library(MLmetrics)
knitr::opts_chunk$set(echo = TRUE)
bank = read_rds("../../BankChurners.rds")
library(forcats)
library(dplyr)
#engineering some features/encoding categorical data
bank1 <- bank %>%
select(-c(2,4:7))
#to check if any columns have a standard deviation of zero
zero_sd_cols <- apply(bank, 2, sd) == 0
#Run the principle component analysis
pr_bank <- prcomp(x = select(bank1, -Churn), scale = T, center = T)
summary(pr_bank)
#Show variance plot
screeplot(pr_bank, type = "lines")
#Visualize biplots
biplot(pr_bank)
biplot(pr_bank, choices = c(3,4))
#Factor loadings
pr_bank$rotation
#Loadings times values for all rows
head(pr_bank$x)
#
# Get factor loadings for first principal component
pc1_loadings <- pr_bank$rotation[, 1]
# Sort factor loadings in descending order
pc1_loadings_sorted <- sort(pc1_loadings, decreasing = TRUE)
# Print sorted factor loadings for PC1
pc1_loadings_sorted
# Credit_Limit
# Total_Trans_Ct
# Customer_Age
# single (---lowers)
# Total_Revolving_Bal
#
# Avg_Open_To_Buy
# Credit_Limit
# Avg_Utilization_Ratio
# Total_Trans_Ct
# Total_Trans_Amt
# Avg_Utilization_Ratio
# Customer_Age
# Dependent_count
# Months_on_book
#original from continuous plus categorical
#select(Total_Trans_Amt, Total_Trans_Ct, Customer_Age, Total_Revolving_Bal, Churn)
bankoJD <- bank1 %>%
select(Credit_Limit, Customer_Age, Total_Revolving_Bal, Total_Trans_Ct,
Total_Trans_Amt, Churn)
#removing Total_Trans_Amt dropped it from .7168 to .5ish
#removing Total_Trans_Ct dropped from .7168 to .62
#removing Avg_Utilization_Ratio dropped from .7168 to .69
#removing Credit_Limit dropped from .7168 to .69
#removing Avg_Open_To_Buy dropped from .7168 to .70
#removing Avg_Open_To_Buy and adding Avg_Utilization_Ratio .7114
#removing Avg_Open_To_Buy and adding Customer_Age .7328
#    (Credit_Limit, Customer_Age, Avg_Utilization_Ratio, Total_Trans_Ct,
#     Total_Trans_Amt, Churn)
#removing Credit_Limit and adding Avg_Utilization_Ratio .6984
#removing Credit_Limit and adding Months_on_book .7046
#continuous first 5:  select(Avg_Open_To_Buy, Credit_Limit, Avg_Utilization_Ratio, Total_Trans_Ct, Total_Trans_Amt, Churn)
#with categorical: select(Credit_Limit, Total_Trans_Ct, Customer_Age, Total_Revolving_Bal, Churn)
print(ncol(bankoJD)) # Only 5 features allowed! Not counting the dependent variable.
#Run the principle component analysis
pr_bank <- prcomp(x = select(bankoJD, -Churn), scale = T, center = T)
summary(pr_bank)
head(pr_bank$x)
# Get factor loadings for first principal component
pc1_loadings <- pr_bank$rotation[, 1]
# Sort factor loadings in descending order
pc1_loadings_sorted <- sort(pc1_loadings, decreasing = TRUE)
# Print sorted factor loadings for PC1
pc1_loadings_sorted
set.seed(504)
ctrl <- trainControl(method = "cv", number = 5, classProbs=TRUE, summaryFunction = twoClassSummary)
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
fit <- train(Churn ~ .,
data = train,
method = "rf",
metric = "ROC",
#preProcess = c("center", "scale"),
trControl = ctrl)
confusionMatrix(predict(fit, test),factor(test$Churn))
# specify the model to be used (i.e. KNN, Naive Bayes, decision tree, random forest, bagged trees) and the tuning parameters used
ctrl <- trainControl(method = "cv", number = 5, classProbs=TRUE, summaryFunction = twoClassSummary)
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
# example spec for rf
fit <- train(Churn ~ .,
data = train,
method = "rf",
metric = "ROC",
trControl = ctrl)
fit
confusionMatrix(predict(fit, test),factor(test$Churn))
# Here are a few lines to inspect your best model. Add some comments about optimal hyperparameters.
print(fit)
print(fit$bestTune)
# the "method" below should match the one you chose above.
set.seed(1504) # I will choose a different seed for evaluation
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
# example spec for rf
fit_final <- train(Churn ~ .,
data = train,
method = "rf",
tuneGrid=fit$bestTune,
metric = "ROC",
trControl = ctrl)
# The last line means we will fit a model using the best tune parameters your CV found above.
myRoc <- roc(test$Churn, predict(fit_final, test, type="prob")[,2])
plot(myRoc)
auc(myRoc)
library(tidyverse)
library(caret)
library(pROC)
library(MLmetrics)
knitr::opts_chunk$set(echo = TRUE)
bank = read_rds("../../BankChurners.rds")
library(forcats)
library(dplyr)
#engineering some features/encoding categorical data
bank1 <- bank %>%
mutate(gender = if_else(Gender=="M",1,0)) %>%
select(-Gender) %>%
mutate(married = if_else(Marital_Status=="Married",1,0)) %>%
mutate(single = if_else(Marital_Status=="Single",1,0)) %>%
mutate(divorced = if_else(Marital_Status=="Divorced",1,0)) %>%
mutate(ms_unknown = if_else(Marital_Status=="Unknown",1,0)) %>%
select(-Marital_Status) %>%
mutate(blue = if_else(Card_Category=="Blue",1,0)) %>%
mutate(gold = if_else(Card_Category=="Gold",1,0)) %>%
mutate(silver = if_else(Card_Category=="Silver",1,0)) %>%
mutate(platinum = if_else(Card_Category=="Platinum",1,0)) %>%
select(-Card_Category) %>%
mutate(ed_level = Education_Level %>%
fct_recode("Unknown" = "Unknown",
"Uneducated" = "Uneducated",
"High School" = "High School",
"College" = "College",
"Graduate" = "Graduate",
"Post-Graduate" = "Post-Graduate",
"Doctorate" = "Doctorate") %>%
as.integer()) %>%
select(-Education_Level) %>%
mutate(income = Income_Category %>%
fct_recode("Unknown" = "Unknown",
"low" = "Less than $40K",
"lowmed" = "40K - $60K",
"med" = "$60K - $80K",
"medhigh" = "$80K - $120K",
"high" = "$120K +") %>%
as.integer()) %>%
select(-Income_Category)
#to check if any columns have a standard deviation of zero
zero_sd_cols <- apply(bank, 2, sd) == 0
#Run the principle component analysis
pr_bank <- prcomp(x = select(bank1, -Churn), scale = T, center = T)
summary(pr_bank)
#Show variance plot
screeplot(pr_bank, type = "lines")
#Visualize biplots
biplot(pr_bank)
biplot(pr_bank, choices = c(3,4))
#Factor loadings
pr_bank$rotation
#Loadings times values for all rows
head(pr_bank$x)
#
# Get factor loadings for first principal component
pc1_loadings <- pr_bank$rotation[, 1]
# Sort factor loadings in descending order
pc1_loadings_sorted <- sort(pc1_loadings, decreasing = TRUE)
# Print sorted factor loadings for PC1
pc1_loadings_sorted
# Credit_Limit
# Total_Trans_Ct
# Customer_Age
# single (---lowers)
# Total_Revolving_Bal
bankoJD <- bank1 %>%
select(Total_Trans_Amt, Total_Trans_Ct, Customer_Age, Total_Revolving_Bal, Churn)
#select(Credit_Limit, Total_Trans_Ct, Customer_Age, Total_Revolving_Bal, Churn)
print(ncol(bankoJD)) # Only 5 features allowed! Not counting the dependent variable.
set.seed(504)
ctrl <- trainControl(method = "cv", number = 5, classProbs=TRUE, summaryFunction = twoClassSummary)
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
fit <- train(Churn ~ .,
data = train,
method = "rf",
metric = "Kappa",
preProcess = c("center", "scale"),
trControl = ctrl)
confusionMatrix(predict(fit, test),factor(test$Churn))
# specify the model to be used (i.e. KNN, Naive Bayes, decision tree, random forest, bagged trees) and the tuning parameters used
ctrl <- trainControl(method = "cv", number = 5, classProbs=TRUE, summaryFunction = twoClassSummary)
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
# example spec for rf
fit <- train(Churn ~ .,
data = train,
method = "rf",
metric = "ROC",
trControl = ctrl)
fit
confusionMatrix(predict(fit, test),factor(test$Churn))
# Here are a few lines to inspect your best model. Add some comments about optimal hyperparameters.
print(fit)
print(fit$bestTune)
# the "method" below should match the one you chose above.
set.seed(1504) # I will choose a different seed for evaluation
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
# example spec for rf
fit_final <- train(Churn ~ .,
data = train,
method = "rf",
tuneGrid=fit$bestTune,
metric = "ROC",
trControl = ctrl)
# The last line means we will fit a model using the best tune parameters your CV found above.
myRoc <- roc(test$Churn, predict(fit_final, test, type="prob")[,2])
plot(myRoc)
auc(myRoc)
library(tidyverse)
library(caret)
library(pROC)
library(MLmetrics)
knitr::opts_chunk$set(echo = TRUE)
#bank = read_rds("../../BankChurners.rds")
bank = read_rds("../BankChurners.rds")
library(forcats)
library(dplyr)
#engineering some features/encoding categorical data
bank1 <- bank %>%
mutate(gender = if_else(Gender=="M",1,0)) %>%
select(-Gender) %>%
mutate(married = if_else(Marital_Status=="Married",1,0)) %>%
mutate(single = if_else(Marital_Status=="Single",1,0)) %>%
mutate(divorced = if_else(Marital_Status=="Divorced",1,0)) %>%
mutate(ms_unknown = if_else(Marital_Status=="Unknown",1,0)) %>%
select(-Marital_Status) %>%
mutate(blue = if_else(Card_Category=="Blue",1,0)) %>%
mutate(gold = if_else(Card_Category=="Gold",1,0)) %>%
mutate(silver = if_else(Card_Category=="Silver",1,0)) %>%
mutate(platinum = if_else(Card_Category=="Platinum",1,0)) %>%
select(-Card_Category) %>%
mutate(ed_level = Education_Level %>%
fct_recode("Unknown" = "Unknown",
"Uneducated" = "Uneducated",
"High School" = "High School",
"College" = "College",
"Graduate" = "Graduate",
"Post-Graduate" = "Post-Graduate",
"Doctorate" = "Doctorate") %>%
as.integer()) %>%
select(-Education_Level) %>%
mutate(income = Income_Category %>%
fct_recode("Unknown" = "Unknown",
"low" = "Less than $40K",
"lowmed" = "40K - $60K",
"med" = "$60K - $80K",
"medhigh" = "$80K - $120K",
"high" = "$120K +") %>%
as.integer()) %>%
select(-Income_Category)
#to check if any columns have a standard deviation of zero
zero_sd_cols <- apply(bank, 2, sd) == 0
#Run the principle component analysis
pr_bank <- prcomp(x = select(bank1, -Churn), scale = T, center = T)
summary(pr_bank)
#Show variance plot
screeplot(pr_bank, type = "lines")
#Visualize biplots
biplot(pr_bank)
biplot(pr_bank, choices = c(3,4))
#Factor loadings
pr_bank$rotation
#Loadings times values for all rows
head(pr_bank$x)
#
# Get factor loadings for first principal component
pc1_loadings <- pr_bank$rotation[, 1]
# Sort factor loadings in descending order
pc1_loadings_sorted <- sort(pc1_loadings, decreasing = TRUE)
# Print sorted factor loadings for PC1
pc1_loadings_sorted
# Credit_Limit
# Total_Trans_Ct
# Customer_Age
# single (---lowers)
# Total_Revolving_Bal
bankoJD <- bank1 %>%
select(Total_Trans_Amt, Total_Trans_Ct, Customer_Age, Total_Revolving_Bal, Churn)
#select(Credit_Limit, Total_Trans_Ct, Customer_Age, Total_Revolving_Bal, Churn)
print(ncol(bankoJD)) # Only 5 features allowed! Not counting the dependent variable.
set.seed(504)
ctrl <- trainControl(method = "cv", number = 5, classProbs=TRUE, summaryFunction = twoClassSummary)
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
fit <- train(Churn ~ .,
data = train,
method = "rf",
metric = "Kappa",
preProcess = c("center", "scale"),
trControl = ctrl)
confusionMatrix(predict(fit, test),factor(test$Churn))
# specify the model to be used (i.e. KNN, Naive Bayes, decision tree, random forest, bagged trees) and the tuning parameters used
ctrl <- trainControl(method = "cv", number = 5, classProbs=TRUE, summaryFunction = twoClassSummary)
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
# example spec for rf
fit <- train(Churn ~ .,
data = train,
method = "rf",
metric = "ROC",
trControl = ctrl)
fit
confusionMatrix(predict(fit, test),factor(test$Churn))
# Here are a few lines to inspect your best model. Add some comments about optimal hyperparameters.
print(fit)
print(fit$bestTune)
# the "method" below should match the one you chose above.
set.seed(1504) # I will choose a different seed for evaluation
bank_index <- createDataPartition(bankoJD$Churn, p = 0.80, list = FALSE)
train <- bankoJD[ bank_index, ]
test <- bankoJD[-bank_index, ]
# example spec for rf
fit_final <- train(Churn ~ .,
data = train,
method = "rf",
tuneGrid=fit$bestTune,
metric = "ROC",
trControl = ctrl)
# The last line means we will fit a model using the best tune parameters your CV found above.
myRoc <- roc(test$Churn, predict(fit_final, test, type="prob")[,2])
plot(myRoc)
auc(myRoc)
library(tidyverse)
library(caret)
library(pROC)
library(MLmetrics)
knitr::opts_chunk$set(echo = TRUE)
bank = read_rds("../BankChurners.rds")
# create some cool features. Make sure you add comments so I know what you are trying to accomplish!
#banko <- bank %>%
#  mutate(age2=Customer_Age^2) %>%
#  select(Customer_Age, age2, Card_Category, Education_Level, Dependent_count, Churn)
# Please do use some PCA! Doesn't have to be all 5 features!
#print(ncol(banko)) # Only 5 features allowed for project 2! Not counting the dependent variable.
#my try
library(forcats)
library(dplyr)
#EDA
glimpse(bank)
sum(is.na(bank))
dim(bank)
unique(bank1$Education_Level)
